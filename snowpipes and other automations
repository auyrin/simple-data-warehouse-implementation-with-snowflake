// CREATE SCHEMA FOR SNOWPIPES
CREATE OR REPLACE SCHEMA MANAGE_DB.PIPES;

// CREATE YOUR SALES PIPE
CREATE OR REPLACE PIPE MANAGE_DB.PIPES.SALES_PIPE
AUTO_INGEST = TRUE
AS 
COPY INTO DWH.staging.sales_raw
FROM @DWH.EXTERNAL_STAGES.AWS_STAGE
;

DESC PIPE MANAGE_DB.PIPES.SALES_PIPE;

// CHECK IG IF OUR SNOWPIPE IS RUNNING
SELECT SYSTEM$PIPE_STATUS( 'MANAGE_DB.PIPES.SALES_PIPE' );

// PAUSE THE SNOWPIPE(WHENEVER) because it might consume too much resources
alter pipe manage_db.pipes.sales_pipe
set PIPE_EXECUTION_PAUSED = TRUE;


// before i upload new files in the aws s3 buckets that'll be copied automatically
// by my snowpipe. lets automate the staging area processes.


// AUTOMATE THE STAGING TO CORE PIPELINE via SCHEDULED TASKS

// steps: check pipe, truncate table if pending tasks, run snowpipe, do the neccessary transformations. insert into the core table

// lets create a procedure for checking our snowpipe
CREATE OR REPLACE PROCEDURE DWH.PUBLIC.CHECK_PIPE_PROD()
RETURNS VARCHAR
LANGUAGE SQL
AS
$$
BEGIN
IF 
    (SELECT JSON_EXTRACT_PATH_TEXT(SYSTEM$PIPE_STATUS( 'MANAGE_DB.PIPES.SALES_PIPE' ), 'pendingFileCount') > 0) THEN 
    // truncate table
    TRUNCATE DWH.STAGING.SALES_RAW; 
    // run snowpipe
    ALTER PIPE MANAGE_DB.PIPES.SALES_PIPE SET PIPE_EXECUTION_PAUSED = FALSE;
    RETURN 'staging truncated...sales_pipe running';
ELSE
    -- pause our parent task
    alter task dwh.public.check_pipe_task suspend;
    RETURN 'no pending files in our sales_pipe';
END IF;
END;
$$
;

//javascript version
CREATE OR REPLACE PROCEDURE DWH.PUBLIC.check_pipe_prod()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS
$$
    var result;
    
    var statement = snowflake.createstatement[{sqlText: "(SELECT JSON_EXTRACT_PATH_TEXT(SYSTEM$PIPE_STATUS( 'MANAGE_DB.PIPES.SALES_PIPE' ), 'pendingFileCount') > 0)"}];

    
    // truncate table
    TRUNCATE DWH.STAGING.SALES_RAW;
    // run snowpipe
    ALTER PIPE MANAGE_DB.PIPES.SALES_PIPE SET PIPE_EXECUTION_PAUSED = FALSE;
    RETURN 'staging truncated...sales_pipe running';
    ELSE
        -- pause our parent task
        alter task dwh.public.check_pipe_task suspend;
        RETURN 'no pending files in our sales_pipe';
$$;



--necessary transformations are in the load and transform file. lets put everything in a task.

// task would run every sunday at 7am utc
CREATE OR REPLACE TASK DWH.PUBLIC.CHECK_PIPE_TASK
    WAREHOUSE = COMPUTE_WH
    SCHEDULE  = '3 MINUTE'
    -- SCHEDULE = 'USING CRON 0 7 * * SUN UTC'
    AS
    CALL DWH.PUBLIC.CHECK_PIPE_PROD();


// CHILD TASK SHOULD DO THE TRANSFORMATIONS ONLY IF THE SALES TABLE HAS BEEN UPDATED

-- STEPS .... select the result of the parent task and only run the child task if the parent task has been executed.

-- couldn't really do much today so i'll commit this statement

-- investigate your pause logic

select max("transaction_id") from dwh.core.sales_fact;

-- my procedures was in sql instead of javascript so it didnt woek properly
